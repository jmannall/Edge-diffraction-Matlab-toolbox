function [Distances,Cosfi] = EDcalccosfi(coordreceivers,coordsurfacesources,nvecsurfacesources)% EDcalccosfi gives both a distance matrix and a cosfi matrix, both of size% [nsurfacepoints,nreceivers].%% Input parameters%   coordreceivers         [nreceivers,3]%   coordsurfacesources    [nsurfacesources,3]%   nvecsurfacesources     [nsurfacesources,3]%% Output parameters%   Distances       [nsurfacesources,nreceivers]%   Cosfi           [nsurfacesources,nreceivers]%% Peter Svensson (peter.svensson@ntnu.no) 2 Oct. 2023%% [Distances,Cosfi] = GEOcalccosfi(coordreceivers,coordsurfacesources,nvecsurfacesources);% 970901 Functioning version% 971002 Included the input parameter dipolevec, giving the possibility%        to use dipole sources.% 971110 Took care of the distance = 0 possibility.% 971111 Speeded up calculations.% 040606 Updated to Matlab 6.5% 13 Dec. 2017 Copied from RADtoolbox to GEOtoolbox% 18 Jan 2018 Copied to EDtoolbox% 2 Oct. 2023 Rewrote it to clarify the code and the use.%% Uses the function EDcalcdistnsurfacesources = size(coordsurfacesources,1);nreceivers = size(coordreceivers,1);% Distances will get size [nsurfacesources,nreceivers]:Distances = EDcalcdist(coordsurfacesources,coordreceivers);Cosfi = zeros(nsurfacesources,nreceivers);for ii = 1:nsurfacesources	coordsinglesource = coordsurfacesources(ii,:);	nvecsinglesource = nvecsurfacesources(ii,:);	xdiff = coordreceivers - coordsinglesource(ones(nreceivers,1),:);	Cosfi(ii,:) = sum( (xdiff.*nvecsinglesource(ones(nreceivers,1),:)).' )./(Distances(ii,:) + eps);end