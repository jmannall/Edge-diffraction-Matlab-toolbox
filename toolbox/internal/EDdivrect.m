function [patchcornercoords,patchmidcoords,areas] = EDdivrect(c1,c2,c3,c4,n1,n2)% EDdivrect divides an arbitrary quadrilateral into a regular grid.%% Input parameters:%	c1,c2,c3,c4		The coordinates [x,y,z] of the 4 corners respectively.%	n1,n2			The number of divisions along the two lines%						c1 -> c2 and c4 -> c3   (n1), and%						c1 -> c4 and c2 -> c3   (n2)% Output parameters:%	patchcornercoords	The 4 corner coordinates of all patches. Format [npatches,12]%	patchmidcoords		The midpoint coordinates of all patches. Format [npatches,3]%	areas				The areas of the patches%% Peter Svensson (peter.svensson@ntnu.no) 18 Jan 2018%% [patchcornercoords,patchmidcoords,areas] = EDdivrect(c1,c2,c3,c4,n1,n2);% 25 Jan 1998 First version, in GEOtoolbox% 18 Jan 2018 Copied over to EDtoolboxtvec1 = [0:n1].'/n1;tvec2 = [0:n2].'/n2;I0 = ones(1,3);I = ones(n1+1,1);sp1 = c1( I,: ) + ( c2(I,:)-c1(I,:) ).*tvec1(:,I0);ep1   = c4( I,: ) + ( c3(I,:)-c4(I,:) ).*tvec1(:,I0);I = ones(n2+1,1);sp2 = c1( I,: ) + ( c4(I,:)-c1(I,:) ).*tvec2(:,I0);ep2   = c2( I,: ) + ( c3(I,:)-c2(I,:) ).*tvec2(:,I0);% The corners of the patches%A = []; B = []; C = []; D = [];A = zeros( n1*n2,3 );B = zeros( n1*n2,3 );C = zeros( n1*n2,3 );D = zeros( n1*n2,3 );I = ones(n1,1);ivec = [1:n1] - n1;ivec1 = [1:n1];ivec2 = ivec1 + 1;for ii = 1:n2	ivec = ivec + n1;	temp1 = sp2(ii,:);	temp1 = temp1( I,: );	temp2 = ep2(ii,:);	temp2 = temp2( I,: );	temp3 = sp2(ii+1,:);	temp3 = temp3( I,: );	temp4 = ep2(ii+1,:);	temp4 = temp4( I,: );	A(ivec,:) = [temp1 + ( temp2 - temp1 ).*tvec1(ivec1,I0)];	B(ivec,:) = [temp1 + ( temp2 - temp1 ).*tvec1(ivec2,I0)];	C(ivec,:) = [temp3 + ( temp4 - temp3 ).*tvec1(ivec2,I0)];	D(ivec,:) = [temp3 + ( temp4 - temp3 ).*tvec1(ivec1,I0)];endpatchcornercoords = [A B C D];patchmidcoords = (A + B + C + D)/4;areas = zeros(n1*n2,1);for ii = 1:n1*n2	c1 = patchcornercoords(ii,1:3);	c2 = patchcornercoords(ii,4:6);	c3 = patchcornercoords(ii,7:9);	c4 = patchcornercoords(ii,10:12);	areas(ii) = norm( cross( (c2-c1),(c4-c1) ) )/2 + norm( cross( (c4-c3),(c2-c3) ))/2;end